package com.hevs.projectcloud.touristofficehealthyservice;

import com.google.android.gms.gcm.GoogleCloudMessaging;

import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuItem;
import android.app.Activity;
import android.view.View;
import android.widget.Button;
import android.widget.TextView;
import android.content.Context;
import android.os.AsyncTask;
import android.widget.Toast;

import com.google.api.client.extensions.android.http.AndroidHttp;
import com.google.api.client.extensions.android.json.AndroidJsonFactory;
import com.google.api.client.googleapis.services.AbstractGoogleClientRequest;
import com.google.api.client.googleapis.services.GoogleClientRequestInitializer;
import com.hevs.projectcloud.touristofficebackend.registration.Registration;
import com.hevs.projectcloud.touristofficebackend.tohsaService.TohsaService;
import com.hevs.projectcloud.touristofficebackend.tohsaService.model.TextCollection;

import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;


public class MainActivity extends Activity {

    /**
     * * Log output.
     */
    private static final Logger LOG = Logger
            .getLogger(MainActivity.class.getName());

    Button  newButton;
    Button  archivedButton;

    /**
     * The class automatically generated by the Google App Engine backend
     * project, used to access the API easily from the Android application.
     */
    private TohsaService tohsaServiceAPI;

    @Override
    protected void onCreate(Bundle savedInstanceState) {

        new GcmRegistrationAsyncTask(this).execute();

        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        // Get layout objects instance
        newButton       = (Button)  findViewById(R.id.archivedButton);
        archivedButton  = (Button)  findViewById(R.id.newButton);

        //LG/ Handle to the GAE endpoints in the backend
        tohsaServiceAPI = CloudEndpointBuilderHelper.getEndpoints();

        //LG/ Get the first Text from the API and display it in a TextView
        //LG/ This is for testing reasons (accessing the backend API)
//        TextView readmeTextView = (TextView) findViewById(R.id.readmeText);
//        String readmeText = retrieveTexts().getItems().get(1).getTextEN();
//        readmeTextView.setText(readmeText);
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        // Inflate the menu; this adds items to the action bar if it is present.
        getMenuInflater().inflate(R.menu.menu_main, menu);
        return true;
    }

    /**
     * onClick event response
     * @param view the element which was clicked
     */
    public void onClick(View view) {
        Intent intent;

        switch (view.getId()) {
            case R.id.newButton:
                intent = new Intent(this, QuestionnaireActivity.class);
                startActivity(intent);
                break;
            case R.id.archivedButton:
                intent = new Intent(this, QuestionnaireListActivity.class);
                startActivity(intent);
                break;
        }
    }

    /**
     * Retrieves questionnaires from API
     */
    final TextCollection retrieveTexts() {

        TextCollection result;

        try {
            result = tohsaServiceAPI.texts().listTextes().execute();
        } catch (IOException e) {
            String message = e.getMessage();
            if (message == null) {
                message = e.toString();
            }
            //log.severe("Exception=" + message);
            result = null;
        }
        return result;
    }

    class GcmRegistrationAsyncTask extends AsyncTask<Void, Void, String> {
        private Registration regService = null;
        private GoogleCloudMessaging gcm;
        private Context context;

        private static final String SENDER_ID = BuildConfig.SENDER_ID;

        public GcmRegistrationAsyncTask(Context context) {
            this.context = context;
        }

        @Override
        protected String doInBackground(Void... params) {
            if (regService == null) {
                Registration.Builder builder = new Registration.Builder(AndroidHttp.newCompatibleTransport(),
                        new AndroidJsonFactory(), null)
                        // Need setRootUrl and setGoogleClientRequestInitializer only for local testing,
                        // otherwise they can be skipped
                        .setRootUrl(BuildConfig.ROOT_URL)
                        .setGoogleClientRequestInitializer(new GoogleClientRequestInitializer() {
                            @Override
                            public void initialize(AbstractGoogleClientRequest<?> abstractGoogleClientRequest)
                                    throws IOException {
                                abstractGoogleClientRequest.setDisableGZipContent(true);
                            }
                        });
                // end of optional local run code

                regService = builder.build();
            }

            String msg = "";
            try {
                if (gcm == null) {
                    gcm = GoogleCloudMessaging.getInstance(context);
                }
                String regId = gcm.register(SENDER_ID);
                msg = "Device registered, registration ID=" + regId;

                // You should send the registration ID to your server over HTTP,
                // so it can use GCM/HTTP or CCS to send messages to your app.
                // The request to your server should be authenticated if your app
                // is using accounts.
                regService.register(regId).execute();

            } catch (IOException ex) {
                ex.printStackTrace();
                msg = "Error: " + ex.getMessage();
            }
            return msg;
        }

        @Override
        protected void onPostExecute(String msg) {
            Toast.makeText(context, msg, Toast.LENGTH_LONG).show();
            Logger.getLogger("REGISTRATION").log(Level.INFO, msg);
        }
    }
}
